{"version":3,"sources":["views/login.js","views/register.js","views/me.js","views/reports.js","views/edit.js","views/chat.js","views/chatHistory.js","views/week01.js","views/week02.js","views/week03.js","views/week04.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","email","password","handleChange","event","setState","target","name","value","handleSubmit","that","fetch","method","headers","body","JSON","stringify","then","response","json","data","localStorage","setItem","token","preventDefault","className","onSubmit","this","type","onChange","React","Component","Register","Me","title","info","result","Reports","getItem","placeholder","Edit","arr","currentOption","handleSelect","a","i","length","for","map","key","chatSocket","io","Chat","useState","newMessage","setNewMessage","allMessages","setAllMessages","nick","setNick","tempNick","setTempNick","dateTime","Date","timeStamp","getHours","getMinutes","getSeconds","ev","messageObject","emit","off","on","message","oldMsgs","receivedMsg","connectObject","e","index","ChatLog","msgs","msg","console","log","Week01","readonly","href","Week02","Week03","Week04","App","to","exact","path","component","me","week01","week02","week03","week04","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"uTAEqBA,E,4MACjBC,MAAQ,CACJC,MAAO,GACPC,SAAU,I,EAGdC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAGrDC,aAAe,SAACL,GACZ,IAAMM,EAAI,eACVC,MAAM,gCAAiC,CACnCC,OAAQ,OACRC,QAAS,CACG,eAAgB,mCAE5BC,KAAMC,KAAKC,UAAU,EAAKhB,SACvBiB,MAAK,SAASC,GACb,OAAOA,EAASC,UACjBF,MAAK,SAAUG,GACVA,EAAKA,OACLC,aAAaC,QAAQ,QAASF,EAAKA,KAAKG,OACxCF,aAAaC,QAAQ,QAASZ,EAAKV,MAAMC,WAGrDG,EAAMoB,kB,uDAIN,OACI,yBAAKC,UAAU,SACX,qCACA,0BAAMC,SAAUC,KAAKlB,cACjB,uCAEA,2BAAOmB,KAAK,QAAQrB,KAAK,QAAQC,MAAOmB,KAAK3B,MAAMC,MAAO4B,SAAUF,KAAKxB,gBAEzE,0CAEA,2BAAOyB,KAAK,WAAWrB,KAAK,WAAWC,MAAOmB,KAAK3B,MAAME,SAAU2B,SAAUF,KAAKxB,gBAElF,2BAAOyB,KAAK,SAASpB,MAAM,QAAQiB,UAAU,sB,GA1C9BK,IAAMC,WCApBC,E,4MACjBhC,MAAQ,CACJC,MAAO,GACPC,SAAU,I,EAGdC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAGrDC,aAAe,SAACL,GACZO,MAAM,mCAAoC,CACtCC,OAAQ,OACRC,QAAS,CAAC,eAAgB,mCAE1BC,KAAMC,KAAKC,UAAU,EAAKhB,SACvBiB,MAAK,SAASC,GACjB,OAAOA,EAASC,UAGpBf,EAAMoB,kB,uDAIN,OACI,yBAAKC,UAAU,YACX,wCACA,0BAAMC,SAAUC,KAAKlB,cACjB,uCAEA,2BAAOmB,KAAK,QAAQrB,KAAK,QAAQC,MAAOmB,KAAK3B,MAAMQ,MAAOqB,SAAUF,KAAKxB,gBAEzE,0CAEA,2BAAOyB,KAAK,WAAWrB,KAAK,WAAWC,MAAOmB,KAAK3B,MAAMQ,MAAOqB,SAAUF,KAAKxB,gBAE/E,2BAAOyB,KAAK,SAASpB,MAAM,WAAWiB,UAAU,yB,GApC9BK,IAAMC,W,uBCuB7BE,E,4MAtBXjC,MAAQ,CACJkC,MAAO,KACPC,KAAM,M,0LAIM,2B,SACWxB,MADX,4B,cACNO,E,gBACeA,EAASC,O,OAAxBiB,E,OACNT,KAAKtB,SAAS,CAAE8B,KAAMC,EAAOhB,KAAKe,KAAMD,MAAOE,EAAOhB,KAAKc,Q,qIAI3D,OACI,6BACI,4BAAKP,KAAK3B,MAAMkC,OAChB,2BAAIP,KAAK3B,MAAMmC,W,GAjBdL,IAAMC,WCoDRM,E,gNAnDXrC,MAAQ,CACJuB,MAAK,UAAEF,aAAaiB,QAAQ,gBAAvB,QAAmC,KACxCrC,MAAK,UAAEoB,aAAaiB,QAAQ,gBAAvB,QAAmC,KACxCJ,MAAO,GACPC,KAAM,I,EAGVhC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAGrDC,aAAe,SAACL,GACZO,MAAM,kCAAmC,CACrCC,OAAQ,OACRC,QAAS,CACL,eAAgB,kCAChB,iBAAkB,EAAKb,MAAMuB,OAGjCT,KAAMC,KAAKC,UAAU,EAAKhB,SACvBiB,MAAK,SAASC,GACb,OAAOA,EAASC,UAGxBf,EAAMoB,kB,uDAIN,OAAIG,KAAK3B,MAAMuB,MAEP,yBAAKE,UAAU,WACX,8CACA,0BAAMC,SAAUC,KAAKlB,cACjB,uCAEA,2BAAOmB,KAAK,OAAOrB,KAAK,QAAQC,MAAOmB,KAAK3B,MAAMQ,MAAOqB,SAAUF,KAAKxB,gBAExE,8BAAUI,KAAK,OAAOgC,YAAY,mBAAmBd,UAAU,OAAOjB,MAAOmB,KAAK3B,MAAMQ,MAAOqB,SAAUF,KAAKxB,eAC9G,2BAAOyB,KAAK,SAASpB,MAAM,aAAaiB,UAAU,qBAM9D,6BACI,gD,GA9CMK,IAAMC,WC2FbS,E,gNA1FXxC,MAAQ,CACJuB,MAAK,UAAEF,aAAaiB,QAAQ,gBAAvB,QAAmC,KACxCrC,MAAK,UAAEoB,aAAaiB,QAAQ,gBAAvB,QAAmC,KACxCJ,MAAO,GACPC,KAAM,GACNM,IAAK,GACLC,cAAe,I,EAUnBvC,aAAe,SAACC,GACZ,EAAKC,SAAL,eAAgBD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,S,EAGrDmC,a,uCAAe,WAAMvC,GAAN,eAAAwC,EAAA,sEACL,EAAKvC,SAAS,CAAC,cAAiBD,EAAME,OAAOE,QADxC,OAEX,IAASqC,EAAG,EAAGA,EAAI,EAAK7C,MAAMyC,IAAIK,OAAQD,IAClC,EAAK7C,MAAM0C,gBAAkB,EAAK1C,MAAMyC,IAAII,GAAGX,OAC/C,EAAK7B,SAAS,CAAC6B,MAAO,EAAKlC,MAAMyC,IAAII,GAAGX,MAAOC,KAAM,EAAKnC,MAAMyC,IAAII,GAAGV,OAJpE,2C,wDASf1B,aAAe,SAACL,GACZO,MAAM,uCAAwC,CAC1CC,OAAQ,MACRC,QAAS,CACL,eAAgB,kCAChB,iBAAkB,EAAKb,MAAMuB,OAGjCT,KAAMC,KAAKC,UAAU,EAAKhB,SACvBiB,MAAK,SAASC,GACjB,OAAOA,EAASC,UAGpBf,EAAMoB,kB,0LAhCM,uC,SACWb,MADX,wC,cACNO,E,gBACeA,EAASC,O,OAAxBiB,E,OACNT,KAAKtB,SAAS,CAAEoC,IAAKL,EAAOhB,O,qIAiC5B,OAAIO,KAAK3B,MAAMuB,MAEP,yBAAKE,UAAU,WACX,4CACA,0BAAMC,SAAUC,KAAKlB,cACjB,2BAAOsC,IAAI,YAAX,qBACA,4BAAQxC,KAAK,WAAWsB,SAAUF,KAAKgB,cACnC,iDAEIhB,KAAK3B,MAAMyC,IAAIO,KAAI,YAAc,IAAZd,EAAW,EAAXA,MACjB,OAAO,4BAAQe,IAAKf,GAAQA,OAIxC,uCAEA,2BACIN,KAAK,OACLrB,KAAK,QACLC,MAAOmB,KAAK3B,MAAMkC,MAClBL,SAAUF,KAAKxB,gBAGnB,8BACII,KAAK,OACLgC,YAAY,mBACZd,UAAU,OACVjB,MAAOmB,KAAK3B,MAAMmC,KAClBN,SAAUF,KAAKxB,eAGnB,2BAAOyB,KAAK,SAASpB,MAAM,cAAciB,UAAU,qBAM/D,6BACI,gD,GArFGK,IAAMC,W,wBCCrBmB,E,MAAaC,GADA,yBAkFFC,EA/EF,WAAO,IAAD,EACqBC,mBAAS,IAD9B,mBACRC,EADQ,KACIC,EADJ,OAEuBF,mBAAS,IAFhC,mBAERG,EAFQ,KAEKC,EAFL,OAGSJ,mBAAS,IAHlB,mBAGRK,EAHQ,KAGFC,EAHE,OAIiBN,mBAAS,IAJ1B,mBAIRO,EAJQ,KAIEC,EAJF,KAKXC,EAAW,IAAIC,KAIfC,EAHiBF,EAASG,WAGG,IAFVH,EAASI,aAE0B,IADnCJ,EAASK,aARjB,4CAkCf,WAA2BC,GAA3B,eAAAxB,EAAA,sDACIwB,EAAG5C,iBAEG6C,EAAgB,CAClBvD,KAFSkD,EAAY,IAAMN,EAAO,KAAOJ,GAK7CC,EAAc,IACdL,EAAWoB,KAAK,eAAgBD,GAChCnB,EAAWqB,IAAI,WATnB,4CAlCe,sBAmDf,OA1BArB,EAAWsB,GAAG,WAAW,SAACC,IAI1B,SAAqBA,GACjBvB,EAAWqB,IAAI,WACfd,GAAe,SAAAiB,GAAO,4BAAQA,GAAR,CAAiBD,OALvCE,CAAYF,MAyBL,KAAPf,EAEI,6BACI,0BAAMhC,SA3ClB,WACIiC,EAAQC,GACR,IAAMgB,EAAgB,CAClB9D,KAAOkD,EAAY,IAAMJ,EAAW,0BAExCV,EAAWoB,KAAK,eAAgBM,GAChC1B,EAAWqB,IAAI,YAqCqB9C,UAAU,aAClC,4CACA,2BAAOG,KAAK,OAAOpB,MAAOoD,EAAU/B,SApCpD,SAAoBgD,GAChB3B,EAAWqB,IAAI,WACfV,EAAYgB,EAAEvE,OAAOE,QAkCiD+B,YAAY,eACtE,2BAAOX,KAAK,SAASpB,MAAM,aAAaiB,UAAU,qBAM1D,6BACI,uCAAaiC,GACb,yBAAKjC,UAAU,cACV+B,EAAYR,KAAI,SAACyB,EAASK,GAAV,OACb,uBAAGrD,UAAU,SAASwB,IAAK6B,GAAQL,EAAQ3D,UAGnD,0BAAMY,SAtEH,6CAuEC,8BAAUlB,MAAO8C,EAAYzB,SAzB7C,SAAsBuC,GAClBlB,EAAWqB,IAAI,WACfhB,EAAca,EAAG9D,OAAOE,QAuByC+B,YAAY,YAAYd,UAAU,aACvF,2BAAOG,KAAK,SAASpB,MAAM,OAAOiB,UAAU,sBC7CjDsD,E,4MA7BX/E,MAAQ,CACJgF,KAAM,I,4LAIM,4B,SACWrE,MADX,6B,cACNO,E,gBACeA,EAASC,O,OAE9B,IAFMiB,E,OAEGS,EAAI,EAAGA,EAAIT,EAAOU,OAAQD,IAC/BlB,KAAKtB,SAAS,CAAE2E,KAAK,GAAD,mBAAMrD,KAAK3B,MAAMgF,MAAjB,CAAuB5C,EAAOS,GAAGoC,QAEzDC,QAAQC,IAAIxD,KAAK3B,MAAMgF,M,qIAIvB,OACI,6BACI,uCACA,yBAAKvD,UAAU,cACVE,KAAK3B,MAAMgF,KAAKhC,KAAI,SAACyB,EAASK,GAAV,OACjB,uBAAGrD,UAAU,SAASwB,IAAK6B,GAAQL,Y,GAtBrC3C,IAAMC,WCyBbqD,E,4MAxBXpF,MAAQ,CACJkC,MAAO,KACPC,KAAM,M,0LAIM,yC,SACWxB,MADX,0C,cACNO,E,gBACeA,EAASC,O,OAAxBiB,E,OACNT,KAAKtB,SAAS,CAAE8B,KAAMC,EAAOhB,KAAKe,KAAMD,MAAOE,EAAOhB,KAAKc,Q,qIAI3D,OACI,6BACI,4BAAKP,KAAK3B,MAAMkC,OAChB,8BAAUmD,UAAQ,EAAC7E,MAAOmB,KAAK3B,MAAMmC,OACrC,6BACA,uBAAGmD,KAAK,uCAAR,e,GAnBKxD,IAAMC,WCyBZwD,E,4MAxBXvF,MAAQ,CACJkC,MAAO,KACPC,KAAM,M,0LAIM,yC,SACWxB,MADX,0C,cACNO,E,gBACeA,EAASC,O,OAAxBiB,E,OACNT,KAAKtB,SAAS,CAAE8B,KAAMC,EAAOhB,KAAKe,KAAMD,MAAOE,EAAOhB,KAAKc,Q,qIAI3D,OACI,6BACI,4BAAKP,KAAK3B,MAAMkC,OAChB,8BAAUmD,UAAQ,EAAC7E,MAAOmB,KAAK3B,MAAMmC,OACrC,6BACA,uBAAGmD,KAAK,uCAAR,e,GAnBKxD,IAAMC,WCyBZyD,E,4MAxBXxF,MAAQ,CACJkC,MAAO,KACPC,KAAM,M,0LAIM,yC,SACWxB,MADX,0C,cACNO,E,gBACeA,EAASC,O,OAAxBiB,E,OACNT,KAAKtB,SAAS,CAAE8B,KAAMC,EAAOhB,KAAKe,KAAMD,MAAOE,EAAOhB,KAAKc,Q,qIAI3D,OACI,6BACI,4BAAKP,KAAK3B,MAAMkC,OAChB,8BAAUmD,UAAQ,EAAC7E,MAAOmB,KAAK3B,MAAMmC,OACrC,6BACA,uBAAGmD,KAAK,uCAAR,e,GAnBKxD,IAAMC,WCyBZ0D,E,4MAxBXzF,MAAQ,CACJkC,MAAO,KACPC,KAAM,M,0LAIM,yC,SACWxB,MADX,0C,cACNO,E,gBACeA,EAASC,O,OAAxBiB,E,OACNT,KAAKtB,SAAS,CAAE8B,KAAMC,EAAOhB,KAAKe,KAAMD,MAAOE,EAAOhB,KAAKc,Q,qIAI3D,OACI,6BACI,4BAAKP,KAAK3B,MAAMkC,OAChB,8BAAUmD,UAAQ,EAAC7E,MAAOmB,KAAK3B,MAAMmC,OACrC,6BACA,uBAAGmD,KAAK,uCAAR,e,GAnBKxD,IAAMC,WC0EZ2D,G,6KAzDP,OACI,kBAAC,IAAD,KACI,yBAAKjE,UAAU,OACX,6BACA,4BACI,4BACA,kBAAC,IAAD,CAAMkE,GAAG,UAAT,UAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,aAAT,aAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,KAAT,OAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,mBAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,iBAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,SAAT,SAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,YAAT,YAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,mBAAT,UAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,mBAAT,UAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,mBAAT,UAEA,4BACA,kBAAC,IAAD,CAAMA,GAAG,mBAAT,YAIJ,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,SAASC,UAAW/F,IACtC,kBAAC,IAAD,CAAO6F,OAAK,EAACC,KAAK,YAAYC,UAAW9D,IACzC,kBAAC,IAAD,CAAO4D,OAAK,EAACC,KAAK,IAAIC,UAAWC,IACjC,kBAAC,IAAD,CAAOH,OAAK,EAACC,KAAK,WAAWC,UAAWzD,IACxC,kBAAC,IAAD,CAAOuD,OAAK,EAACC,KAAK,QAAQC,UAAWtD,IACrC,kBAAC,IAAD,CAAOoD,OAAK,EAACC,KAAK,QAAQC,UAAW1C,IACrC,kBAAC,IAAD,CAAOwC,OAAK,EAACC,KAAK,WAAWC,UAAWf,IACxC,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,kBAAkBC,UAAWE,IAC/C,kBAAC,IAAD,CAAOJ,OAAK,EAACC,KAAK,kBAAkBC,UAAWG,IAC/C,kBAAC,IAAD,CAAOL,OAAK,EAACC,KAAK,kBAAkBC,UAAWI,IAC/C,kBAAC,IAAD,CAAON,OAAK,EAACC,KAAK,kBAAkBC,UAAWK,U,GApDjDrE,IAAMC,YCLJqE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB/F,MAAK,SAAAgG,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAM3C,c","file":"static/js/main.1d8a48da.chunk.js","sourcesContent":["import React from 'react';\n\nexport default class Login extends React.Component {\n    state = {\n        email: '',\n        password: ''\n    }\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n    \n    handleSubmit = (event) => {\n        const that = this;\n        fetch('https://my-api.jsram.me/login', {\n            method: 'POST',\n            headers: {\n                        \"Content-Type\": \"application/json; charset=utf-8\"\n                    },\n            body: JSON.stringify(this.state)\n            }).then(function(response) {\n                return response.json();\n            }).then(function (data) {\n                if (data.data) {\n                    localStorage.setItem('token', data.data.token);\n                    localStorage.setItem('email', that.state.email); \n                }\n            });\n        event.preventDefault();\n    }\n\n    render () {\n        return (\n            <div className=\"login\">\n                <h2>Login</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Email\n                    <input type=\"email\" name=\"email\" value={this.state.email} onChange={this.handleChange}></input>\n                    </label>\n                    <label>\n                        Password\n                    <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange}></input>\n                    </label>\n                    <input type=\"submit\" value=\"Login\" className=\"loginButton\"></input>\n                </form>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nexport default class Register extends React.Component {\n    state = {\n        email: '',\n        password: '',\n    }\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n    \n    handleSubmit = (event) => {\n        fetch('https://my-api.jsram.me/register', {\n            method: 'POST',\n            headers: {\"Content-Type\": \"application/json; charset=utf-8\"},\n            // We convert the React state to JSON and send it as the POST body\n            body: JSON.stringify(this.state),\n            }).then(function(response) {\n            return response.json();\n            });\n\n        event.preventDefault();\n    }\n\n    render () {\n        return (\n            <div className=\"register\">\n                <h2>Register</h2>\n                <form onSubmit={this.handleSubmit}>\n                    <label>\n                        Email\n                    <input type=\"email\" name=\"email\" value={this.state.value} onChange={this.handleChange}></input>\n                    </label>\n                    <label>\n                        Password\n                    <input type=\"password\" name=\"password\" value={this.state.value} onChange={this.handleChange}></input>\n                    </label>\n                    <input type=\"submit\" value=\"Register\" className=\"registerButton\"></input>\n                </form>\n            </div>\n        );\n    }\n}","import React from 'react';\n\nclass Me extends React.Component {\n    state = {\n        title: null,\n        info: null\n    };\n\n    async componentDidMount() {\n        const url = \"https://my-api.jsram.me/\";\n        const response = await fetch(url);\n        const result = await response.json();\n        this.setState({ info: result.data.info, title: result.data.title });\n    }\n\n    render () {\n        return (\n            <div>\n                <h2>{this.state.title}</h2>\n                <p>{this.state.info}</p>\n            </div>\n        );\n    }\n}\n\nexport default Me;","import React from 'react';\n\nclass Reports extends React.Component {\n    state = {\n        token: localStorage.getItem('token') ?? null,\n        email: localStorage.getItem('email') ?? null,\n        title: '',\n        info: ''\n    };\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n    \n    handleSubmit = (event) => {\n        fetch('https://my-api.jsram.me/reports', {\n            method: 'POST',\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\",\n                \"x-access-token\": this.state.token\n            },\n            // We convert the React state to JSON and send it as the POST body\n            body: JSON.stringify(this.state),\n            }).then(function(response) {\n                return response.json();\n            });\n\n        event.preventDefault();\n    }\n\n    render () {\n        if (this.state.token) {\n            return (\n                <div className=\"reports\">\n                    <h2>Create Reports</h2>\n                    <form onSubmit={this.handleSubmit}>\n                        <label>\n                            Title\n                        <input type=\"text\" name=\"title\" value={this.state.value} onChange={this.handleChange}></input>\n                        </label>\n                        <textarea name=\"info\" placeholder=\"Add text here...\" className=\"area\" value={this.state.value} onChange={this.handleChange}></textarea>\n                        <input type=\"submit\" value=\"Add Report\" className=\"registerButton\"></input>\n                    </form>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <p>Login please</p>\n            </div>\n        );\n    }\n}\n\nexport default Reports;","import React from 'react';\n\nclass Edit extends React.Component {\n    state = {\n        token: localStorage.getItem('token') ?? null,\n        email: localStorage.getItem('email') ?? null,\n        title: '',\n        info: '',\n        arr: [],\n        currentOption: ''\n    };\n\n    async componentDidMount() {\n        const url = \"https://my-api.jsram.me/reports/edit\";\n        const response = await fetch(url);\n        const result = await response.json();\n        this.setState({ arr: result.data });\n    }\n\n    handleChange = (event) => {\n        this.setState({[event.target.name]: event.target.value});\n    }\n\n    handleSelect = async(event) => {\n        await this.setState({\"currentOption\": event.target.value});\n        for (let i= 0; i < this.state.arr.length; i++) {\n            if (this.state.currentOption === this.state.arr[i].title) {\n                this.setState({title: this.state.arr[i].title, info: this.state.arr[i].info});\n            }\n        }\n    }\n\n    handleSubmit = (event) => {\n        fetch('https://my-api.jsram.me/reports/edit', {\n            method: 'PUT',\n            headers: {\n                \"Content-Type\": \"application/json; charset=utf-8\",\n                \"x-access-token\": this.state.token\n            },\n            // We convert the React state to JSON and send it as the POST body\n            body: JSON.stringify(this.state),\n            }).then(function(response) {\n            return response.json();\n            });\n\n        event.preventDefault();\n    }\n\n    render () {\n        if (this.state.token) {\n            return (\n                <div className=\"reports\">\n                    <h2>Edit Reports</h2>\n                    <form onSubmit={this.handleSubmit}>\n                        <label for=\"dropdown\">Choose a Report: </label>\n                        <select name=\"dropdown\" onChange={this.handleSelect}>\n                            <option>Choose report</option>\n                            {\n                                this.state.arr.map(({title}) => {\n                                    return <option key={title}>{title}</option>\n                                })\n                            }\n                        </select>\n                        <label>\n                            Title\n                        <input\n                            type=\"text\"\n                            name=\"title\"\n                            value={this.state.title}\n                            onChange={this.handleChange}>\n                        </input>\n                        </label>\n                        <textarea \n                            name=\"info\" \n                            placeholder=\"Add text here...\"\n                            className=\"area\"\n                            value={this.state.info}\n                            onChange={this.handleChange}\n                        >\n                        </textarea>\n                        <input type=\"submit\" value=\"Edit Report\" className=\"registerButton\"></input>\n                    </form>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <p>Login please</p>\n            </div>\n        );\n    }\n}\n\nexport default Edit;","import React, { useState } from \"react\";\nimport io from \"socket.io-client\";\nconst ENDPOINT = \"http://localhost:3000\";\nvar chatSocket = io(ENDPOINT);\n\nconst Chat = () => {\n    const [newMessage, setNewMessage] = useState(\"\");\n    const [allMessages, setAllMessages] = useState([]);\n    const [nick, setNick] = useState(\"\");\n    const [tempNick, setTempNick] = useState(\"\");\n    var dateTime = new Date();\n    var timeStampHours = dateTime.getHours();\n    var timeStampMinutes = dateTime.getMinutes();\n    var timeStampSeconds = dateTime.getSeconds();\n    var timeStamp = timeStampHours + \":\" + timeStampMinutes + \":\" + timeStampSeconds;\n\n    function nickSubmit() {\n        setNick(tempNick);\n        const connectObject = {\n            body: (timeStamp + \" \" + tempNick + \" connected to the chat\")\n        };\n        chatSocket.emit('send message', connectObject);\n        chatSocket.off('message');\n    }\n\n    function handleNick(e) {\n        chatSocket.off('message');\n        setTempNick(e.target.value);\n    }\n\n    chatSocket.on('message', (message) => {\n        receivedMsg(message);\n    });\n\n    function receivedMsg(message) {\n        chatSocket.off('message');\n        setAllMessages(oldMsgs => [...oldMsgs, message]);\n    }\n\n    async function sendMessage(ev) {\n        ev.preventDefault();\n        var msgStr = timeStamp + \" \" + nick + \": \" + newMessage;\n        const messageObject = {\n            body: (msgStr)\n        };\n\n        setNewMessage(\"\");\n        chatSocket.emit('send message', messageObject);\n        chatSocket.off('message');\n    }\n\n    function handleChange(ev) {\n        chatSocket.off('message');\n        setNewMessage(ev.target.value);\n    }\n\n    if (nick===\"\") {\n        return (\n            <div>\n                <form onSubmit={nickSubmit} className=\"enterChat\">\n                    <label>Nickname:</label>\n                    <input type=\"text\" value={tempNick} onChange={handleNick} placeholder=\"Nickname: \"></input>\n                    <input type=\"Submit\" value=\"Enter Chat\" className=\"registerButton\"></input>\n                </form>\n            </div>\n        );\n    } else {\n        return (\n            <div>\n                <h2>Chat as {nick}</h2>\n                <div className=\"chatWindow\">\n                    {allMessages.map((message, index) => (\n                        <p className=\"txtMsg\" key={index}>{message.body}</p>\n                    ))}\n                </div>\n                <form onSubmit={sendMessage}>\n                    <textarea value={newMessage} onChange={handleChange} placeholder=\"Message: \" className=\"areaChat\"/>\n                    <input type=\"Submit\" value=\"Send\" className=\"registerButton\"></input>\n                </form>\n            </div>\n        );\n    }\n}\n\nexport default Chat;\n","import React from 'react';\n\nclass ChatLog extends React.Component {\n    state = {\n        msgs: []\n    };\n\n    async componentDidMount() {\n        const url = \"http://localhost:3000/old\";\n        const response = await fetch(url);\n        const result = await response.json();\n\n        for (let i = 0; i < result.length; i++) {\n            this.setState({ msgs: [...this.state.msgs, result[i].msg] })\n        }\n        console.log(this.state.msgs);\n    }\n\n    render () {\n        return (\n            <div>\n                <h2>ChatLog</h2>\n                <div className=\"chatWindow\">\n                    {this.state.msgs.map((message, index) => (\n                        <p className=\"txtMsg\" key={index}>{message}</p>\n                    ))}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default ChatLog;","import React from 'react';\n\nclass Week01 extends React.Component {\n    state = {\n        title: null,\n        info: null\n    };\n\n    async componentDidMount() {\n        const url = \"https://my-api.jsram.me/reports/week/1\";\n        const response = await fetch(url);\n        const result = await response.json();\n        this.setState({ info: result.data.info, title: result.data.title });\n    }\n\n    render () {\n        return (\n            <div>\n                <h2>{this.state.title}</h2>\n                <textarea readonly value={this.state.info}></textarea>\n                <br></br>\n                <a href=\"https://github.com/Skwoat/jsramverk\">Github</a>\n            </div>\n        );\n    }\n}\n\nexport default Week01;","import React from 'react';\n\nclass Week02 extends React.Component {\n    state = {\n        title: null,\n        info: null\n    };\n\n    async componentDidMount() {\n        const url = \"https://my-api.jsram.me/reports/week/2\";\n        const response = await fetch(url);\n        const result = await response.json();\n        this.setState({ info: result.data.info, title: result.data.title });\n    }\n\n    render () {\n        return (\n            <div>\n                <h2>{this.state.title}</h2>\n                <textarea readonly value={this.state.info}></textarea>\n                <br></br>\n                <a href=\"https://github.com/Skwoat/jsramverk\">Github</a>\n            </div>\n        );\n    }\n}\n\nexport default Week02;","import React from 'react';\n\nclass Week03 extends React.Component {\n    state = {\n        title: null,\n        info: null\n    };\n\n    async componentDidMount() {\n        const url = \"https://my-api.jsram.me/reports/week/3\";\n        const response = await fetch(url);\n        const result = await response.json();\n        this.setState({ info: result.data.info, title: result.data.title });\n    }\n\n    render () {\n        return (\n            <div>\n                <h2>{this.state.title}</h2>\n                <textarea readonly value={this.state.info}></textarea>\n                <br></br>\n                <a href=\"https://github.com/Skwoat/jsramverk\">Github</a>\n            </div>\n        );\n    }\n}\n\nexport default Week03;","import React from 'react';\n\nclass Week04 extends React.Component {\n    state = {\n        title: null,\n        info: null\n    };\n\n    async componentDidMount() {\n        const url = \"https://my-api.jsram.me/reports/week/4\";\n        const response = await fetch(url);\n        const result = await response.json();\n        this.setState({ info: result.data.info, title: result.data.title });\n    }\n\n    render () {\n        return (\n            <div>\n                <h2>{this.state.title}</h2>\n                <textarea readonly value={this.state.info}></textarea>\n                <br></br>\n                <a href=\"https://github.com/Skwoat/jsramverk\">Github</a>\n            </div>\n        );\n    }\n}\n\nexport default Week04;","import React from 'react';\nimport { BrowserRouter as Router, Link, Route } from 'react-router-dom';\n\nimport Login from './views/login.js';\nimport Register from './views/register.js';\nimport me from './views/me.js';\nimport Reports from './views/reports.js';\nimport Edit from './views/edit.js';\nimport Chat from './views/chat.js';\nimport ChatLog from './views/chatHistory.js';\nimport week01 from './views/week01.js';\nimport week02 from './views/week02.js';\nimport week03 from './views/week03.js';\nimport week04 from './views/week04.js';\n\nimport './App.css';\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <div className=\"App\">\n                    <nav>\n                    <ul>\n                        <li>\n                        <Link to=\"/login\">Login</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/register\">Register</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/\">Me</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/reports\">Create Reports</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/edit\">Edit Reports</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/chat\">Chat</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/chatLog\">ChatLog</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/reports/week/1\">kmom1</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/reports/week/2\">kmom2</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/reports/week/3\">kmom3</Link>\n                        </li>\n                        <li>\n                        <Link to=\"/reports/week/4\">kmom4</Link>\n                        </li>\n                    </ul>\n                    </nav>\n                    <Route exact path=\"/login\" component={Login} />\n                    <Route exact path=\"/register\" component={Register} />\n                    <Route exact path=\"/\" component={me} />\n                    <Route exact path=\"/reports\" component={Reports} />\n                    <Route exact path=\"/edit\" component={Edit} />\n                    <Route exact path=\"/chat\" component={Chat} />\n                    <Route exact path=\"/chatLog\" component={ChatLog} />\n                    <Route exact path=\"/reports/week/1\" component={week01} />\n                    <Route exact path=\"/reports/week/2\" component={week02} />\n                    <Route exact path=\"/reports/week/3\" component={week03} />\n                    <Route exact path=\"/reports/week/4\" component={week04} />\n                </div>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}